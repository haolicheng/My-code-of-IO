高精度计算

int 10^9
LL 10^18

12345

int a=12345;

int b[]={1,2,3,4,5};
int c[]={6,7,8}
5+4*10+3*10^2 + 2*10^3 +1*10^4


在数组中 逆序存储大数字

int b[]={5,4,3,2,1，0，0，0};
int c[]={8,7,6}

加法：

12345
  678
------
    3

for(int i=0;i<n;i++){
	d[i]=c[i]+b[i];
}
//需要进位
for(int i=0;i<n;i++){
	d[i+1]+=d[i]/10;
	d[i]%=10;
}//进位代码

复杂度 O(n)

乘法：
12345
  678
------
 xxxx
xxxx
xxx

for(int i=0;i<n;i++){
	for(int j=0;j<n;j++){
		d[i+j]+=a[i]*b[j];
	}
}
d[3]
a[0]*b[3] a[1]*b[2] a[2]*b[1] a[3]*b[0] 

for(int i=0;i<n;i++){
	d[i+1]+=d[i]/10;
	d[i]%=10;
}

O(n^2)


struct N{
	int a[1000];
};

N operator * (N a,N b){

}

压位：


int b[]={5,4,3,2,1，0，0，0};

b[i]     b[i]*10^i
c[i]     c[i]*1000^i


123456789

int b[]={9,8,7,6,5,4,3,2,1};
int c[]={789,456,123}

加法运算 int 8 LL 17

乘法运算 int base

base*base*n <= int_max 

除法（高精度除高精度） ： 二分+乘
a/b  = k
b*k <=a



NOI Linux

python

1236688989*5467567567
+/-/*'/'/  **

2**10 = 1024



*******

//快速幂
int pow(int a,int b,int c){
	int ret=1%c;
	while(b){
		if(b&1) ret=(ret*a)%c;
		a=(a*a)%c;
		b>>=1;
	}
	return ret;
}

int -〉 LL


//慢速乘
int mul(int a,int b,int c){
	int ret=0;
	while(b){
		if(b&1) ret=(ret+a)%c;
		b>>=1;
		a=(a<<1)%c;
	}
	return ret;
}



1011001
1001001




*********

从别的进制转当前进制

8进制 123   0123
16          0x123
10          123  

123.456 = 3+2*8+1*8*8  + 4/8 +5/8/8+6/8/8/8
base

int a[]; // 顺序存储
for(int i=1;i<=n;i++){
	ans = ans*base+a[i];
}

123  -> 8进制
123 % 8
123/8 

int a[],n;  b-〉 base
while(b>0){
	a[++n]=b%base;
	b/=base;
}
//a 逆序存储

*******

123.456  ->  转8进制
0.456  *8 



从别的进制转当前进制：按照位置的代表的基数乘积求和
从当前进制转别的进制： 整数，不停%base /base 小数部分 不停*base 取整数部分


1011
23
13
b

0x476576576576



判断素数

c=a*b

min(a,b) <= sqrt(c)

bool judge(int x){
	for(int i=2;i*i<=x;i++){
		if(x%i==0) return false;
	}
	return true;
}

Miller Rabin


12  1 2 3 4 6 12
18  1 2 3 6 9 18
a|b  b%a==0

x,y

z|x   
z|y

x|z
y|z

12 18
z 1 2 3 6

gcd(12,18) = 6

x = p1^a1 p2^a2 p3^a3 .... 
y = p1^b1 p2^b2 p3^b3 .... 
gcd pi^min(ai,bi)
lcm pi^max(ai,bi)
gcd lcm = x*y

x=2^3 * 3^5 * 5^2
y=2^5 * 3^3 * 5^1
g=2^3 * 3^3 * 5^1

\sum

int gcd(int a,int b){  //  a<b : swap   a>b
	if(b==0) return a;
	return gcd(b,a%b);   // a>b a%b  < mx/2
}

int lcm(int a,int b){
	return a/gcd(a,b)*b;
}


// O(logn)

(a,b)  a>b
a=bq+r   r<b

ga'=gb'q+gr'

g|a
g|b


扩展欧几里得算法：
求一组ax+by=d的解 d=(a,b)
int gcd(int a,int b){  //  a<b : swap   a>b
	if(b==0){
		return a;
	}
	return gcd(b,a%b);
}

ax+by=d

下一层的解
b,a%b
bx+(a%b)y=d
bx+(a − [a/b] ∗ b)y=d
bx+ay − [a/b]by=d
当前层的解
ay +b(x− [a/b]y) =d
ax'+by'=d
x'=y
y'=(x− [a/b]y)

交换x,y
x'=x
y'=(y− [a/b]x)


解
 ax + by = c      6x+8y=100

ax' + by'=(a,b)   6x'+8y'=2
(a,b)|c   (不整除无解)

x=x'* (c/gcd(a,b))
y=y'* (c/gcd(a,b))


ax+by=d
a(x+b)+b(y-a) =d
x'=x+kb
y'=y-ka


ax =1     mod b
ax+by=1

(x%b+b)%b

gcd(a,b) =gcd(b,r)
a>b

z|a
z|b

a|b

b%a==0

a=bq+r 
q=a/b
r=a%b

ax = 1  (mod b)

***************

phi

2 3 
phi(12) = 4
1 5 7 11 

12*(1-1/2)*(1-1/3) = 4

11
phi(11) = 10

p phi(p) = p-1

p^k  phi(p^k)= p^k-p^(k-1) 
p 2p 3p 4p 5p 6p... p^k

p^k / p

7^5  phi(7^5)= 7^5-7^4


phi(3*5)=phi(3)*phi(5)


phi(p1^k1 p2^k2)  = phi(p1^k1)phi(p2^k2)



mod p

1,2,...p-1

x=1*2*3*...*(p-1)

a,2a,...,(p-1)a  为1~(p-1)的一个排列

y=a*2a*3a*...*(p-1)a = x

y=a^(p-1)*x =x

a^(p-1)= 1

mod 5

1 2 3 4
a=3
3 1 4 2
a=4
4 3 2 1


3*4 = 2  mod 5
2/4 2*(4^{-1}) 

ab = 1
b=1/a

a^(p-2)*a = 1

a^(p-2)为a的逆元 mod p
a^(phi(n)-1)为a的逆元 mod n

O(n) 1~n  mod p 每个数字的逆元

n!  (mod p)
O(logn)  (n!)^{-1}

(n-1)!n= n!

((n-1)!)^{-1} * n^{-1} = (n!)^{-1}

n^{-1}=  (n!)^{-1} *  (n-1)!
((n-1)!)^{-1} = (n!)^{-1}*n
(n-1)^{-1} = ((n-1)!)^{-1}*  (n-2)!

f[i] 表示i!
inv[i] 表示i^{-1}
f[0]=1;
for(int i=1;i<=n;i++) f[i]=(f[i-1]*i)%p;

t=pow(f[n],p-2,p);

for(int i=n;i>=1;i--){
	// t = i!^-1
	inv[i]=t*f[i-1]%p;
	t=t*i%p;
}

O(n)求每个数字的逆元

*****



X +k lcm(a[1..n])
lcm(a[1..n])


X
X%3=2
X%5=3
X%7=2
23

X
X%a[i] = b[i]
中国剩余定理：

当a[i]都为素数
M=a[1]*a[2]*...*a[n]
X=k1+k2+...+kn
ki %a[i]= b[i]
ki %a[j]=0  i!=j
inv(x,y) 为x在mod y意义下的逆元
ki=(M/a[i])*inv((M/a[i]),a[i])*b[i]

X%3=2
X%5=3
X%7=2
M=3*5*7=105
X=k1+k2+k3
k1=35*inv(35,3)*2
  =35*2*2=140  = 35
k2=21*1*3=63
k3=15*1*2=30
X=128%M = 23
O(nlogn)




















